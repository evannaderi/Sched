const Shift = require('../models/Shift');

exports.createShift = async (req, res) => {
  try {
    const { _id, date, empId, templateId } = req.body;
    
    // Create a new shift
    const newShift = new Shift({
      date,
      empId,
      templateId
    });
    
    // Save to the database
    await newShift.save();
    
    res.status(201).json(newShift);
  } catch (error) {
    res.status(400).json({ message: 'Failed to create shift', error });
  }
};

exports.getShift = async (req, res) => {
  try {
    const { id } = req.params;
    
    // Find shift by ID
    const shift = await Shift.findById(id);
    
    if (!shift) {
      return res.status(404).json({ message: 'Shift not found' });
    }

    res.status(200).json(shift);
  } catch (error) {
    res.status(400).json({ message: 'Failed to get shift', error });
  }
};

exports.editShift = async (req, res) => {
  try {
    console.log('Editing shift...');
    console.log('Request body:', req.body);

    const { id } = req.params;
    const { date, empId, templateId } = req.body;

    console.log('Shift ID:', id);
    // Update shift by ID
    const updatedShift = await Shift.findByIdAndUpdate(
      id,
      { date, empId, templateId },
      { new: true }
    );

    if (!updatedShift) {
      return res.status(404).json({ message: 'Shift not found' });
    }

    res.status(200).json(updatedShift);
  } catch (error) {
    res.status(400).json({ message: 'Failed to edit shift', error });
  }
};

exports.deleteShift = async (req, res) => {
  try {
    const { id } = req.params;
    await Shift.findByIdAndDelete(id);
    res.status(200).json({ message: 'Shift deleted successfully' });
  } catch (error) {
    res.status(400).json({ message: 'Failed to delete shift', error });
  }
};

exports.getShiftByDate = async (req, res) => {
  try {
    console.log('Fetching for shifts by date...');

    // const unixTimestamp = -61851600000000;
    // const isoDate = new Date(unixTimestamp).toISOString();
    // console.log(isoDate);

    const { date } = req.params;
    
    const selectedDate = new Date(date);
    const nextDate = new Date(date);

    nextDate.setDate(selectedDate.getDate() + 1);

    const shifts = await Shift.find({
      date: { $gte: selectedDate, $lt: nextDate },
    });

    if (!shifts || shifts.length === 0) {
      return res.status(404).json({ message: 'No shifts found for the specified date' });
    }

    res.status(200).json(shifts);
  }

  catch (error) {
    res.status(500).json({ message: 'Error fetching for shifts by date', error});
    console.error('There was an error fetching for shifts by date', error); 
  }
}

exports.getShiftByEmpId = async (req, res) => {
  try {
    console.log('Fetching for shifts by employee ID...');
    
    const { empId } = req.params;

    const shifts = await Shift.find({ empId });

    if (!shifts || shifts.length === 0) {
      return res.status(404).json({ message: 'No shifts found for the specified employee ID' });
    }

    res.status(200).json(shifts);
  } 
  
  catch (error) {
    res.status(500).json({ message: 'Error fetching shifts by employee ID', error });
    console.error('There was an error fetching shifts by employee ID', error);
  }
};