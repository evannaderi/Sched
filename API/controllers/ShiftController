const Shift = require('../models/Shift');
const Employee = require('../models/Employee');
const ShiftTemplate = require('../models/ShiftTemplate');

exports.createShift = async (req, res) => {
  console.log('Creating shift...');
  try {
    console.log('Creating shift...');
    const { date, empId, templateId } = req.body;
    const [month, day, year] = date.split('-').map(d => parseInt(d, 10));
    // Adjusting for the year format, assuming it's a 2-digit year.
    const fullYear = 2000 + year;
    const shiftDate = new Date(fullYear, month - 1, day);
    const dayOfWeek = shiftDate.getDay();

    // Find the employee and the template
    const employee = await Employee.findById(empId).populate('positions');
    const template = await ShiftTemplate.findById(templateId);

    if (!employee) {
      return res.status(404).json({ message: 'Employee not found' });
    }

    if (!template) {
      return res.status(404).json({ message: 'Shift template not found' });
    }

    // Check if employee has the position required by the template
    const positionMatch = employee.positions.some(position => position._id.toString() === template.positionId);
    if (!positionMatch) {
      return res.status(400).json({ message: 'Employee does not hold the required position for this shift' });
    }

    // Validate employee's availability
    const isAvailable = employee.availability.some(avail => {
      // Debugging: log the availability and template times
      console.log(`Checking availability for dayOfWeek: ${avail.dayOfWeek} with template dayOfWeek: ${dayOfWeek}`);
      console.log(`Employee Start Time: ${avail.startTime}, Template Start Time: ${template.startTime}`);
      console.log(`Employee End Time: ${avail.endTime}, Template End Time: ${template.endTime}`);

      const dayOfWeekMatch = parseInt(avail.dayOfWeek) === parseInt(template.dayOfWeek);
      console.log('Day of week match?', dayOfWeekMatch);
      
    
      const startTimeMatch = convertTimeToMinutes(avail.startTime) <= convertTimeToMinutes(template.startTime);
      console.log('Start time match?', startTimeMatch);
    
      const endTimeMatch = convertTimeToMinutes(avail.endTime) >= convertTimeToMinutes(template.endTime);
      console.log('End time match?', endTimeMatch);

      const isAvailable = dayOfWeekMatch && startTimeMatch && endTimeMatch;
      console.log('Is available?', isAvailable);

      console.log(`Checking availability for dayOfWeek: ${avail.dayOfWeek} with template dayOfWeek: ${dayOfWeek}`);
      console.log(`Day of week match? ${avail.dayOfWeek === template.dayOfWeek}`);



      return isAvailable;
    });
    

    if (!isAvailable) {
      return res.status(400).json({ message: 'Employee is not available at this time' });
    }
    
    // Create a new shift
    const newShift = new Shift({
      date,
      empId,
      templateId
    });
    
    // Save to the database
    await newShift.save();
    
    res.status(201).json(newShift);
  } catch (error) {
    console.log('Error creating shift:', error)
    res.status(400).json({ message: 'Failed to create shift mwahahah', error });
  }
};

exports.getShift = async (req, res) => {
  try {
    const { id } = req.params;
    
    // Find shift by ID
    const shift = await Shift.findById(id);
    
    if (!shift) {
      return res.status(404).json({ message: 'Shift not found' });
    }

    res.status(200).json(shift);
  } catch (error) {
    res.status(400).json({ message: 'Failed to get shift', error });
  }
};

exports.editShift = async (req, res) => {
  try {
    console.log('Editing shift...');
    console.log('Request body:', req.body);
    const { id } = req.params;
    const { date, empId, templateId } = req.body;

    console.log('Shift ID:', id);
    // Update shift by ID
    const updatedShift = await Shift.findByIdAndUpdate(
      id,
      { date, empId, templateId },
      { new: true }
    );

    if (!updatedShift) {
      return res.status(404).json({ message: 'Shift not found' });
    }

    res.status(200).json(updatedShift);
  } catch (error) {
    res.status(400).json({ message: 'Failed to edit shift', error });
  }
};

exports.deleteShift = async (req, res) => {
  try {
    const { id } = req.params;
    await Shift.findByIdAndDelete(id);
    res.status(200).json({ message: 'Shift deleted successfully' });
  } catch (error) {
    res.status(400).json({ message: 'Failed to delete shift', error });
  }
};

function convertTimeToMinutes(time) {
  const [hours, minutes] = time.split(":").map(Number);
  return hours * 60 + minutes;
}